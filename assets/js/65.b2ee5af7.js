(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{480:function(t,a,e){"use strict";e.r(a);var r=e(20),o=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),e("p",[t._v("使用标准的 WebSocket 来传输数据。")]),t._v(" "),e("p",[t._v("WebSocket 连接可以被其它 HTTP 服务器（如 Nginx）分流，也可以被 VLESS fallbacks path 分流。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Websocket 会识别 HTTP 请求的 X-Forwarded-For 头来覆写流量的源地址，优先级高于 PROXY protocol。")])]),t._v(" "),e("h2",{attrs:{id:"websocketobject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocketobject"}},[t._v("#")]),t._v(" WebSocketObject")]),t._v(" "),e("p",[e("code",[t._v("WebSocketObject")]),t._v(" 对应传输配置的 "),e("code",[t._v("wsSettings")]),t._v(" 项。")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"acceptProxyProtocol"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"path"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"headers"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Host"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xray.com"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[e("code",[t._v("acceptProxyProtocol")]),t._v(": true | false")])]),t._v(" "),e("p",[t._v("仅用于 inbound，指示是否接收 PROXY protocol。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.haproxy.org/download/2.2/doc/proxy-protocol.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("PROXY protocol"),e("OutboundLink")],1),t._v(" 专用于传递请求的真实来源 IP 和端口，"),e("strong",[t._v("若你不了解它，请先忽略该项")]),t._v("。")]),t._v(" "),e("p",[t._v("常见的反代软件（如 HAProxy、Nginx）都可以配置发送它，VLESS fallbacks xver 也可以发送它。")]),t._v(" "),e("p",[t._v("填写 "),e("code",[t._v("true")]),t._v(" 时，最底层 TCP 连接建立后，请求方必须先发送 PROXY protocol v1 或 v2，否则连接会被关闭。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("path")]),t._v(" string")])]),t._v(" "),e("p",[t._v("WebSocket 所使用的 HTTP 协议路径，默认值为 "),e("code",[t._v('"/"')]),t._v("。")]),t._v(" "),e("p",[t._v("如果路径中包含 "),e("code",[t._v("ed")]),t._v(" 参数，将会启用 "),e("code",[t._v("Early Data")]),t._v(" 以降低延迟，其值为首包长度阈值。如果首包长度超过此值，就不会启用 "),e("code",[t._v("Early Data")]),t._v("。建议的值为 2048。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[e("code",[t._v("Early Data")]),t._v(" 使用 "),e("code",[t._v("Sec-WebSocket-Protocol")]),t._v(" 头承载数据。如果你遇到兼容性问题，可以尝试调低阈值。")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("headers")]),t._v(": map {string: string}")])]),t._v(" "),e("p",[t._v("自定义 HTTP 头，一个键值对，每个键表示一个 HTTP 头的名称，对应的值是字符串。")]),t._v(" "),e("p",[t._v("默认值为空。")]),t._v(" "),e("h2",{attrs:{id:"browser-dialer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#browser-dialer"}},[t._v("#")]),t._v(" Browser Dialer "),e("Badge",{attrs:{text:"BETA",type:"warning"}})],1),t._v(" "),e("h3",{attrs:{id:"background"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[t._v("#")]),t._v(" Background")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/v2ray/discussion/issues/754#issuecomment-647934994",target:"_blank",rel:"noopener noreferrer"}},[t._v("v2ray/discussion#754"),e("OutboundLink")],1),t._v(" 基于一年前的想法，原生 JS 实现了简洁的 WSS Browser Dialer，真实浏览器的 TLS 指纹、行为特征。")]),t._v(" "),e("p",[t._v("不过 WSS 仍存在 ALPN 明显的问题，所以下一步是浏览器转发 HTTP/2、QUIC。")]),t._v(" "),e("h3",{attrs:{id:"xray-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xray-js"}},[t._v("#")]),t._v(" Xray & JS")]),t._v(" "),e("p",[t._v("创造了一个非常简单、巧妙的通信机制：")]),t._v(" "),e("ul",[e("li",[t._v("Xray 监听地址端口 A，作为 HTTP 服务，浏览器访问 A，加载网页中的 JS。")]),t._v(" "),e("li",[t._v("JS 主动向 A 建立 WebSocket 连接，成功后，Xray 将连接发给 channel。")]),t._v(" "),e("li",[t._v("需要建立连接时，Xray 从 channel 接收一个可用的连接，并发送目标 URL 和可选的 early data。")]),t._v(" "),e("li",[t._v("JS 成功连接到目标后告知 Xray，并继续用这个 conn 全双工双向转发数据，连接关闭行为同步。")]),t._v(" "),e("li",[t._v("连接使用后就会被关闭，但 JS 会确保始终有新空闲连接可用。")])]),t._v(" "),e("h3",{attrs:{id:"early-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#early-data"}},[t._v("#")]),t._v(" Early data")]),t._v(" "),e("p",[t._v("根据浏览器的需求，对 early data 机制进行了如下调整：")]),t._v(" "),e("ul",[e("li",[t._v("服务端响应头会带有请求的 "),e("code",[t._v("Sec-WebSocket-Protocol")]),t._v("，这也初步混淆了 WSS 握手响应的长度特征。")]),t._v(" "),e("li",[t._v("用于浏览器的 early data 编码是 "),e("code",[t._v("base64.RawURLEncoding")]),t._v(" 而不是 "),e("code",[t._v("StdEncoding")]),t._v("，服务端做了兼容。")]),t._v(" "),e("li",[t._v("此外，由于 "),e("a",{attrs:{href:"https://github.com/XTLS/Xray-core/pull/375",target:"_blank",rel:"noopener noreferrer"}},[t._v("#375"),e("OutboundLink")],1),t._v(" 推荐 "),e("code",[t._v("?ed=2048")]),t._v("，这个 PR 顺便将服务端一处 "),e("code",[t._v("MaxHeaderBytes")]),t._v(" 扩至了 4096。 "),e("s",[t._v("（虽然好像不改也没问题）")])])]),t._v(" "),e("h3",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration "),e("Badge",{attrs:{text:"v1.4.1",type:"warning"}})],1),t._v(" "),e("p",[t._v("这是一个探索的过程，目前两边都是 Xray-core v1.4.1 时的配置方式：")]),t._v(" "),e("ul",[e("li",[t._v("准备一份可用的 WSS 配置，注意 address 必须填域名，若需要指定 IP，请配置 DNS 或系统 hosts。")]),t._v(" "),e("li",[t._v("若浏览器的流量也会经过 Xray-core，务必将这个域名设为直连，否则会造成流量回环。")]),t._v(" "),e("li",[t._v("设置环境变量指定要监听的地址端口，比如 "),e("code",[t._v("XRAY_BROWSER_DIALER = 127.0.0.1:8080")]),t._v("。")]),t._v(" "),e("li",[t._v("先运行 Xray-core，再用任一浏览器访问上面指定的地址端口，还可以 "),e("code",[t._v("F12")]),t._v(" 看 "),e("code",[t._v("Console")]),t._v(" 和 "),e("code",[t._v("Network")]),t._v("。")]),t._v(" "),e("li",[t._v("浏览器会限制 WebSocket 连接数，所以建议开启 "),e("code",[t._v("Mux.Cool")]),t._v("。")])])])}),[],!1,null,null,null);a.default=o.exports}}]);